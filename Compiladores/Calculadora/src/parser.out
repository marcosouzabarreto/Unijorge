Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> empty
Rule 3     expression -> expression MULTIPLICATION expression
Rule 4     expression -> expression DIVISION expression
Rule 5     expression -> expression PLUS expression
Rule 6     expression -> expression MINUS expression
Rule 7     expression -> INT
Rule 8     expression -> FLOAT
Rule 9     empty -> <empty>

Terminals, with rules where they appear

DIVISION             : 4
FLOAT                : 8
INT                  : 7
MINUS                : 6
MULTIPLICATION       : 3
PLUS                 : 5
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 2
expression           : 1 3 3 4 4 5 5 6 6

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . empty
    (3) expression -> . expression MULTIPLICATION expression
    (4) expression -> . expression DIVISION expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) empty -> .

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    $end            reduce using rule 9 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (3) expression -> expression . MULTIPLICATION expression
    (4) expression -> expression . DIVISION expression
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression

    $end            reduce using rule 1 (calc -> expression .)
    MULTIPLICATION  shift and go to state 6
    DIVISION        shift and go to state 7
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9


state 3

    (2) calc -> empty .

    $end            reduce using rule 2 (calc -> empty .)


state 4

    (7) expression -> INT .

    MULTIPLICATION  reduce using rule 7 (expression -> INT .)
    DIVISION        reduce using rule 7 (expression -> INT .)
    PLUS            reduce using rule 7 (expression -> INT .)
    MINUS           reduce using rule 7 (expression -> INT .)
    $end            reduce using rule 7 (expression -> INT .)


state 5

    (8) expression -> FLOAT .

    MULTIPLICATION  reduce using rule 8 (expression -> FLOAT .)
    DIVISION        reduce using rule 8 (expression -> FLOAT .)
    PLUS            reduce using rule 8 (expression -> FLOAT .)
    MINUS           reduce using rule 8 (expression -> FLOAT .)
    $end            reduce using rule 8 (expression -> FLOAT .)


state 6

    (3) expression -> expression MULTIPLICATION . expression
    (3) expression -> . expression MULTIPLICATION expression
    (4) expression -> . expression DIVISION expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . INT
    (8) expression -> . FLOAT

    INT             shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 10

state 7

    (4) expression -> expression DIVISION . expression
    (3) expression -> . expression MULTIPLICATION expression
    (4) expression -> . expression DIVISION expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . INT
    (8) expression -> . FLOAT

    INT             shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 11

state 8

    (5) expression -> expression PLUS . expression
    (3) expression -> . expression MULTIPLICATION expression
    (4) expression -> . expression DIVISION expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . INT
    (8) expression -> . FLOAT

    INT             shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 12

state 9

    (6) expression -> expression MINUS . expression
    (3) expression -> . expression MULTIPLICATION expression
    (4) expression -> . expression DIVISION expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . INT
    (8) expression -> . FLOAT

    INT             shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 13

state 10

    (3) expression -> expression MULTIPLICATION expression .
    (3) expression -> expression . MULTIPLICATION expression
    (4) expression -> expression . DIVISION expression
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression

    MULTIPLICATION  reduce using rule 3 (expression -> expression MULTIPLICATION expression .)
    DIVISION        reduce using rule 3 (expression -> expression MULTIPLICATION expression .)
    PLUS            reduce using rule 3 (expression -> expression MULTIPLICATION expression .)
    MINUS           reduce using rule 3 (expression -> expression MULTIPLICATION expression .)
    $end            reduce using rule 3 (expression -> expression MULTIPLICATION expression .)

  ! MULTIPLICATION  [ shift and go to state 6 ]
  ! DIVISION        [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 11

    (4) expression -> expression DIVISION expression .
    (3) expression -> expression . MULTIPLICATION expression
    (4) expression -> expression . DIVISION expression
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression

    MULTIPLICATION  reduce using rule 4 (expression -> expression DIVISION expression .)
    DIVISION        reduce using rule 4 (expression -> expression DIVISION expression .)
    PLUS            reduce using rule 4 (expression -> expression DIVISION expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVISION expression .)
    $end            reduce using rule 4 (expression -> expression DIVISION expression .)

  ! MULTIPLICATION  [ shift and go to state 6 ]
  ! DIVISION        [ shift and go to state 7 ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 12

    (5) expression -> expression PLUS expression .
    (3) expression -> expression . MULTIPLICATION expression
    (4) expression -> expression . DIVISION expression
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression

    PLUS            reduce using rule 5 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 5 (expression -> expression PLUS expression .)
    $end            reduce using rule 5 (expression -> expression PLUS expression .)
    MULTIPLICATION  shift and go to state 6
    DIVISION        shift and go to state 7

  ! MULTIPLICATION  [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! DIVISION        [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 13

    (6) expression -> expression MINUS expression .
    (3) expression -> expression . MULTIPLICATION expression
    (4) expression -> expression . DIVISION expression
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression

    PLUS            reduce using rule 6 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 6 (expression -> expression MINUS expression .)
    $end            reduce using rule 6 (expression -> expression MINUS expression .)
    MULTIPLICATION  shift and go to state 6
    DIVISION        shift and go to state 7

  ! MULTIPLICATION  [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! DIVISION        [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]

